// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String @unique
  username      String?   @unique
  summary       String?
  image                String?   @default("https://hrty.vercel.app/zO2iET")
  isMachine            Boolean   @default(false)
  passwordHash         String?
  invalidLoginAttempts Int       @default(0)
  // System
  lockedAt             DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt()
  accounts             Account[]
  sessions             Session[]
  handles              Handle[]
  linkUrls             LinkUrl[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  createdAt                DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Category {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id           String   @id @default(cuid())
  title        String
  slug         String   @unique
  description  String?
  price        Int
  manualPdfUrl String?
  videoUrl     String?
  imageUrl     String
  available    Boolean  @default(true)
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Handle {
  id        String   @id @default(cuid())
  userName  String
  name      String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model LinkUrl {
  id        String   @id @default(cuid())
  link      String
  title     String
  isPublic  Boolean  @default(false)
  url       String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
